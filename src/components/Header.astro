---
// src/components/Header.astro
// The top header bar with branding, search, sort, and filter chips
const BASE = import.meta.env.BASE_URL || "/";

const {
    showFiltersButton = true,
    showControls = true,
    showChips = true,
    floating = true,
} = Astro.props;
---

<!-- add id so we can measure -->
<header id="siteHeader" class={floating ? "floating" : ""}>
    <div class="bar container">
        {
            showFiltersButton && (
                <button
                    class="button"
                    id="openFilters"
                    aria-label="Open filters"
                >
                    ☰
                </button>
            )
        }
        <div class="brand"><a href={BASE}>Saved Reddit</a></div>
        <div class="spacer"></div>
        <a class="button" href={`${BASE}favorites`} aria-label="Favorites">⭐</a
        >

        {
            showControls && (
                <div class="controls">
                    <input
                        id="searchInput"
                        class="input"
                        placeholder="Search…"
                    />
                    <select id="sortSelect" class="input" title="Sort by">
                        <option value="saved">Saved order</option>
                        <option value="created">Post date</option>
                        <option value="score">Score</option>
                        <option value="comments">Comments</option>
                        <option value="title">Title</option>
                        <option value="subreddit">Subreddit</option>
                        <option value="author">Author</option>
                        <option value="domain">Domain</option>
                        <option value="flair">Flair</option>
                    </select>
                    <button
                        class="button"
                        id="dirToggle"
                        title="Toggle asc/desc"
                        aria-label="Toggle sort direction"
                    >
                        ↑
                    </button>
                    <!-- <button
                        class="button"
                        id="copyView"
                        title="Copy current view URL"
                    >
                        Copy
                    </button> -->
                    <button class="button" id="favFirst">
                        Favs first
                    </button>
                </div>
            )
        }
    </div>

    {showChips && <div class="chips container" id="activeChips" />}
</header>

<!-- Minimal client helpers: open drawer + live chips -->
<script is:inline>
    (function () {
        if (typeof window === "undefined") return;

        // Open filter drawer from header button
        const btn = document.getElementById("openFilters");
        btn &&
            btn.addEventListener("click", () => {
                window.dispatchEvent(new CustomEvent("filters:open"));
            });

        // Chips rendering from URL params
        const chipsEl = document.getElementById("activeChips");
        if (!chipsEl) return;

        const listParams = ["subs", "authors", "flairs", "media", "domains"];

        function parseLists(sp) {
            const out = {};
            for (const k of listParams) {
                const v = sp.get(k) || "";
                out[k] = v
                    ? v.split(",").map(decodeURIComponent).filter(Boolean)
                    : [];
            }
            return out;
        }

        function badgeLabel(k) {
            switch (k) {
                case "subs":
                    return "r/";
                case "authors":
                    return "u/";
                case "flairs":
                    return "";
                case "media":
                    return "";
                case "domains":
                    return "";
                default:
                    return "";
            }
        }

        function renderChips() {
            const sp = new URLSearchParams(location.search);
            const lists = parseLists(sp);
            const fr = document.createDocumentFragment();
            let count = 0;

            for (const k of listParams) {
                for (const val of lists[k]) {
                    count++;
                    const chip = document.createElement("span");
                    chip.className = "chip";
                    chip.textContent = `${badgeLabel(k)}${val} `;
                    const x = document.createElement("span");
                    x.className = "x";
                    x.textContent = "✕";
                    x.setAttribute("role", "button");
                    x.addEventListener("click", () => {
                        // remove this val from k
                        const arr = lists[k].filter((v) => v !== val);
                        if (arr.length)
                            sp.set(k, arr.map(encodeURIComponent).join(","));
                        else sp.delete(k);
                        const url = new URL(location.href);
                        url.search = sp.toString();
                        history.pushState({}, "", url);
                        window.dispatchEvent(new Event("urlchange"));
                        renderChips();
                    });
                    chip.appendChild(x);
                    fr.appendChild(chip);
                }
            }
            chipsEl.innerHTML = "";
            if (count) chipsEl.appendChild(fr);
        }

        // Fire on popstate and when our app pushes URL updates
        const _ps = history.pushState;
        const _rs = history.replaceState;
        history.pushState = function (...args) {
            const r = _ps.apply(this, args);
            window.dispatchEvent(new Event("urlchange"));
            return r;
        };
        history.replaceState = function (...args) {
            const r = _rs.apply(this, args);
            window.dispatchEvent(new Event("urlchange"));
            return r;
        };

        // “Copy link” convenience
        const copyBtn = document.getElementById("copyView");
        if (copyBtn && navigator.clipboard) {
            copyBtn.addEventListener("click", async () => {
                try {
                    await navigator.clipboard.writeText(location.href);
                    copyBtn.textContent = "Copied!";
                    setTimeout(() => (copyBtn.textContent = "Copy link"), 1000);
                } catch {}
            });
        }

        window.addEventListener("popstate", renderChips);
        window.addEventListener("urlchange", renderChips);
        renderChips();

        (function setupDirToggle() {
            const dirBtn = document.getElementById("dirToggle");
            if (!dirBtn) return;

            const defaultDirFor = (sort) =>
                sort === "created" ? "desc" : "asc";

            const getSortAndDir = () => {
                const sp = new URLSearchParams(location.search);
                const sort = sp.get("sort") || "saved";
                const dir = sp.get("dir") || defaultDirFor(sort);
                return { sort, dir, sp };
            };

            const syncButton = () => {
                const { dir } = getSortAndDir();
                dirBtn.textContent = dir === "desc" ? "↓" : "↑";
                dirBtn.title =
                    dir === "desc"
                        ? "Sorting: Descending"
                        : "Sorting: Ascending";
                dirBtn.setAttribute(
                    "aria-pressed",
                    dir === "desc" ? "true" : "false",
                );
            };

            const setDir = (nextDir) => {
                const { sort, sp } = getSortAndDir();
                // keep URLs tidy: omit ?dir= when it matches the default for this sort
                const def = defaultDirFor(sort);
                if (nextDir === def) sp.delete("dir");
                else sp.set("dir", nextDir);
                const url = new URL(location.href);
                url.search = sp.toString();
                history.pushState({}, "", url);
                window.dispatchEvent(new Event("urlchange"));
                syncButton();
            };

            dirBtn.addEventListener("click", () => {
                const { dir } = getSortAndDir();
                setDir(dir === "desc" ? "asc" : "desc");
            });

            window.addEventListener("popstate", syncButton);
            window.addEventListener("urlchange", syncButton);
            syncButton();
        })();

        const favBtn = document.getElementById("favFirst");
        if (favBtn) {
            const setLabel = () => {
                const sp = new URLSearchParams(location.search);
                favBtn.classList.toggle("primary", sp.get("favfirst") === "1");
            };
            favBtn.addEventListener("click", () => {
                const sp = new URLSearchParams(location.search);
                if (sp.get("favfirst") === "1") sp.delete("favfirst");
                else sp.set("favfirst", "1");
                const url = new URL(location.href);
                url.search = sp.toString();
                history.pushState({}, "", url);
                window.dispatchEvent(new Event("urlchange"));
                setLabel();
            });
            window.addEventListener("urlchange", setLabel);
            window.addEventListener("popstate", setLabel);
            setLabel();
        }
    })();
</script>

{floating && (
  <script is:inline>
    (function(){
      if (typeof window === 'undefined') return;
      var header = document.getElementById('siteHeader');
      if (!header) return;

      function applyOffset(){
        // measure total header height (bar + chips)
        var h = header.offsetHeight || 0;
        // push the page content down by the same amount
        document.body.style.paddingTop = h + 'px';
      }

      // recalibrate on events that can change header height
      window.addEventListener('resize', applyOffset);
      window.addEventListener('load', applyOffset);
      window.addEventListener('urlchange', applyOffset); // chips change on filter apply/remove

      // run immediately
      applyOffset();
    })();
  </script>
)}